{"version":3,"file":"index.es.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { MetaMaskLogin } from './components/MetaMaskLogin';\nimport { LoadingScreen } from './components/LoadingScreen';\nimport { NFTGrid } from './components/NFTGrid';\nimport { ConfirmationScreen } from './components/ConfirmationScreen';\nimport { useNFTFetcher } from './hooks/useNFTFetcher';\nimport './styles.css';\n\ninterface PluginState {\n  provider: ethers.providers.Web3Provider | null;\n  address: string | null;\n  selectedNft: NFTMetadata | null;\n}\n\nconst Logo = () => (\n  <div className=\"nft-logo-container\">\n    <img src=\"./assets/logo.svg\" alt=\"NFT Media Importer\" className=\"nft-logo\" />\n  </div>\n);\n\nexport function NFTMediaImporter() {\n  const [state, setState] = useState<PluginState>({\n    provider: null,\n    address: null,\n    selectedNft: null\n  });\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const { nfts, loading, error, fetchNFTs, verifyNFTOwnership } = useNFTFetcher();\n\n  const handleConnect = useCallback(async (provider: ethers.providers.Web3Provider) => {\n    try {\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      setState(prev => ({ ...prev, provider, address }));\n      fetchNFTs(address);\n    } catch (err) {\n      console.error('Error getting signer address:', err);\n      alert('Failed to connect wallet. Please try again.');\n    }\n  }, [fetchNFTs]);\n\n  const handleNFTSelect = useCallback((nft: NFTMetadata) => {\n    setState(prev => ({ ...prev, selectedNft: nft }));\n    setShowConfirmation(true);\n  }, []);\n\n  const handleConfirm = useCallback(async () => {\n    if (!state.selectedNft || !state.address) return;\n\n    try {\n      // Verify ownership before importing\n      const isOwner = await verifyNFTOwnership(\n        state.address,\n        state.selectedNft.contract.address,\n        state.selectedNft.tokenId\n      );\n\n      if (!isOwner) {\n        alert('Ownership verification failed. Please try again.');\n        return;\n      }\n\n      // Import to Framer's media library\n      await window.$framer.addMedia({\n        name: state.selectedNft.name || `NFT #${state.selectedNft.tokenId}`,\n        url: state.selectedNft.image,\n        type: 'image'\n      });\n\n      setShowConfirmation(false);\n      setState(prev => ({ ...prev, selectedNft: null }));\n      alert('NFT successfully imported to Framer!');\n    } catch (err) {\n      console.error('Error importing NFT:', err);\n      alert('Failed to import NFT. Please try again.');\n    }\n  }, [state.selectedNft, state.address, verifyNFTOwnership]);\n\n  const handleCancel = useCallback(() => {\n    setShowConfirmation(false);\n    setState(prev => ({ ...prev, selectedNft: null }));\n  }, []);\n\n  const handleRetry = useCallback(() => {\n    if (state.address) {\n      fetchNFTs(state.address);\n    }\n  }, [state.address, fetchNFTs]);\n\n  const renderContent = () => {\n    if (!state.provider || !state.address) {\n      return (\n        <div className=\"nft-flex nft-flex-col nft-items-center\">\n          <Logo />\n          <MetaMaskLogin onConnect={handleConnect} />\n        </div>\n      );\n    }\n\n    if (loading) {\n      return <LoadingScreen />;\n    }\n\n    if (error) {\n      return (\n        <div className=\"nft-p-8 nft-text-center\">\n          <Logo />\n          <div className=\"nft-text-red-600 nft-mb-4\">Error: {error}</div>\n          <button\n            onClick={handleRetry}\n            className=\"nft-btn-primary\"\n          >\n            Retry\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <Logo />\n        <NFTGrid nfts={nfts} onSelect={handleNFTSelect} />\n        <ConfirmationScreen\n          nft={state.selectedNft}\n          isOpen={showConfirmation}\n          onConfirm={handleConfirm}\n          onCancel={handleCancel}\n        />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"nft-page-bg nft-p-6\">\n      <div className=\"nft-max-w-6xl nft-mx-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n\n// Export for Framer\nexport default {\n  title: \"NFT Media Importer\",\n  component: NFTMediaImporter,\n  \n  // Canvas support\n  canvas: {\n    width: 800,\n    height: 600,\n    position: \"relative\"\n  },\n\n  // Collection support\n  collection: {\n    type: \"managed\" as const,\n    modes: [\"grid\", \"list\"],\n    defaultMode: \"grid\",\n    itemSize: { width: 200, height: 200 },\n    gap: 16,\n    padding: 16,\n    configure: async (collection: FramerCollection): Promise<FramerCollection> => {\n      return {\n        mode: collection.mode || \"grid\",\n        itemSize: collection.itemSize || { width: 200, height: 200 },\n        gap: collection.gap || 16,\n        padding: collection.padding || 16\n      };\n    },\n    sync: async (collection: FramerCollection): Promise<FramerCollection> => {\n      return collection;\n    }\n  }\n};\n"],"names":["Logo","jsx","NFTMediaImporter","state","setState","useState","showConfirmation","setShowConfirmation","nfts","loading","error","fetchNFTs","verifyNFTOwnership","useNFTFetcher","handleConnect","useCallback","provider","address","prev","err","handleNFTSelect","nft","handleConfirm","handleCancel","handleRetry","renderContent","jsxs","MetaMaskLogin","LoadingScreen","Fragment","NFTGrid","ConfirmationScreen","index","collection"],"mappings":"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"}